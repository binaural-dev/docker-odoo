#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import subprocess

_logger = logging.getLogger(__name__)


SOURCES = str(os.environ.get("SOURCES"))
CUSTOM = str(os.path.join(SOURCES, "custom"))
RESOURCES = str(os.environ.get("RESOURCES"))

addons = []

# Handle enterprise: use enterprise in custom or in src
ENTERPRISE_PATH = os.path.join(SOURCES, "enterprise")
if os.path.isdir(ENTERPRISE_PATH):
    addons.insert(0, os.path.join(ENTERPRISE_PATH))

INTEGRA_PATH = os.path.join(SOURCES, "integra-addons")
if os.path.isdir(INTEGRA_PATH):
    addons.insert(0, os.path.join(INTEGRA_PATH))

THIRD_PATH = os.path.join(SOURCES, "third-party-addons")
if os.path.isdir(THIRD_PATH):
    addons.insert(0, os.path.join(THIRD_PATH))

# Odoo Venezuela public modules
VENEZUELA_PATH = os.path.join(SOURCES, "odoo-venezuela")
if os.path.isdir(VENEZUELA_PATH):
    addons.insert(0, os.path.join(VENEZUELA_PATH))

# Project repositories
repo_addons = []

# Custom repositories, usually mounted for development
if os.path.isdir(CUSTOM):
    repo_addons += [
        os.path.join(CUSTOM, d)
        for d in sorted(os.listdir(CUSTOM))
        if os.path.isdir(os.path.join(CUSTOM, d))
    ]

    for d in sorted(os.listdir(CUSTOM)):
        module_path = os.path.join(CUSTOM, d)
        requirement_file = os.path.join(module_path, "requirements.txt")
        if os.path.exists(requirement_file):
            subprocess.check_call(
                [
                    "pip",
                    "install",
                    "--user",
                    "--no-cache-dir",
                    "-r",
                    requirement_file,
                ]
            )

# Repo addons are preprended, in case we want to overwrite odoo modules
addons = repo_addons + addons

# Overwrite 10-addons.conf
_logger.debug("Updating addons_path.. %s" % addons)
with open(os.path.join(RESOURCES, "conf.d", "10-addons.conf"), "w+") as file:
    file.write("[options]\naddons_path = %s" % ",".join(addons))
