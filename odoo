#!/usr/bin/env python3

import argparse
import os
import subprocess
try:
    from dotenv import load_dotenv
except ModuleNotFoundError:
    raise SystemExit(
        "Missing dependency: python-dotenv. Install it with 'sudo apt-get install python3-dotenv' or 'pip install python-dotenv'."
    )
from pathlib import Path
import time


def sync(repo_name, branch, show=False):
    path = str(Path(__file__).resolve().parent)
    src_path = path + "/src/"
    repo_path = src_path + "custom/" + repo_name
    if not os.path.isdir(repo_path):
        print("No se encuentra el repositorio solicitado!")
        return
    os.chdir(repo_path)

    stdout = subprocess.DEVNULL
    stderr = subprocess.STDOUT

    if show:
        stdout = None
        stderr = None
    print("\r %s: Guardando cambios actuales... " % (repo_name), end=" " * 50)
    value = subprocess.run(["git", "status"], capture_output=True)
    values_lines = value.stdout.decode().split("\n")
    branch_now = values_lines[0].replace("On branch ", "")

    submodules = ["integra-addons", "third-party-addons"]
    print(
        "\r %s: Cambiando a %s                           " % (repo_name, branch),
        end=" " * 50,
    )
    subprocess.run(["git", "stash"], stdout=stdout, stderr=stderr)
    subprocess.run(["git", "checkout", branch], stdout=stdout, stderr=stderr)
    subprocess.run(["git", "pull"], stdout=stdout, stderr=stderr)
    print(
        "\r %s: Actualizando %s                          " % (repo_name, branch),
        end=" " * 50,
    )
    for submodule in submodules:
        subprocess.run(
            ["git", "reset", "HEAD", "--", submodule], stdout=stdout, stderr=stderr
        )
        subprocess.run(
            ["git", "-C", submodule, "stash", "--include-untracked"],
            stdout=stdout,
            stderr=stderr,
        )
        subprocess.run(
            ["git", "submodule", "update", "--init", "--force", "--", submodule],
            stdout=stdout,
            stderr=stderr,
        )
        print(
            "\r %s: Obteniendo submodulos de %s                     "
            % (repo_name, branch),
            end=" " * 50,
        )

    print("")
    for submodule in submodules:
        if not show:
            print("\r %s Sincronizando... " % (submodule), end="")
        commit = ""
        try:
            with open(
                repo_path + "/.git/modules/" + submodule + "/HEAD", "r"
            ) as Modules:
                line = Modules.readlines()[0]
                if line.startswith("ref:"):
                    commit = line.split("/")[2].replace("\n", "")
                else:
                    commit = line.replace("\n", "")

            if not commit:
                continue
            submodule_path = src_path + submodule
            os.chdir(submodule_path)
            subprocess.run(["git", "stash"], stdout=stdout, stderr=stderr)
            subprocess.run(["git", "fetch"], stdout=stdout, stderr=stderr)
            response = subprocess.run(["git", "checkout", commit], capture_output=True)
            success = response.stderr.decode()

            if commit[:8] not in success and commit[:7] not in success:
                print(commit.encode())
                print(success.encode())
                print("ERROR")
                raise Exception("Error")

            if not show:
                print("\r %s ( %s ) Sincronizado ✅" % (submodule, commit), end=" " * 30)
        except Exception as a:
            print(a)
            if not show:
                print(
                    "\r %s ( %s ) Sincronizado Fallido ❌" % (submodule, commit),
                    end=" " * 30,
                )

        if not show:
            print("")

    os.chdir(repo_path)
    subprocess.run(["git", "checkout", branch_now], stdout=stdout, stderr=stderr)
    subprocess.run(["git", "stash", "pop"], stdout=stdout, stderr=stderr)


def run_bash():
    PROJECT_NAME = os.getenv("PROJECT_NAME")
    print(f"docker exec -uroot -it {PROJECT_NAME} bash")
    os.system(f"docker exec -uroot -it {PROJECT_NAME} bash")


def build_odoo(no_cache):
    ODOO_VERSION = os.getenv("ODOO_VERSION")
    RESOURCES_DIR = "/.resources"
    file_path = str(Path(__file__).resolve().parent)

    if not os.path.exists(file_path + "/.env"):
        print("Error #1: The file .env does not exist")
        return

    if not ODOO_VERSION:
        print("Error #2: ODOO_VERSION is not defined")
        return

    try:
        with open(file_path + RESOURCES_DIR + "/Dockerfile", "w") as Dockerfile:
            dockerfile_path = (
                file_path
                + RESOURCES_DIR
                + "/dockerfiles/"
                + ODOO_VERSION
                + "_Dockerfile"
            )
            dockerfile_template_path = (
                file_path + RESOURCES_DIR + "/Dockerfile.template"
            )

            if not os.path.exists(dockerfile_path):
                raise BaseException(
                    f"Error #3: Dockerfile for {ODOO_VERSION} does not exist"
                )

            if not os.path.exists(dockerfile_template_path):
                raise BaseException(f"Error #3: Dockerfile.template does not exist")

            with open(dockerfile_path, "r") as dockerfile_version:
                Dockerfile.write(dockerfile_version.read())
                Dockerfile.write(
                    "\n"
                )  # Opcional: agregar un salto de línea entre los archivos

            with open(dockerfile_template_path, "r") as dockerfile_template:
                Dockerfile.write(dockerfile_template.read())
                Dockerfile.write(
                    "\n"
                )  # Opcional: agregar un salto de línea entre los archivos

    except FileNotFoundError as e:
        print(e)
    if no_cache:
        print("Construyendo Odoo sin caché...")
        os.system("docker compose build --no-cache")
    else:
        print("Construyendo Odoo con caché...")
        os.system("docker compose build")


def init_addons():
    required_sources = {
        "binaural": [
            "binaural-dev/enterprise",
            "binaural-dev/integra-addons",
            "binaural-dev/third-party-addons",
            "binaural-dev/odoo-venezuela",
        ],
        "external": ["binaural-dev/odoo-venezuela"],
        "enterprise": ["binaural-dev/enterprise"],
    }
    ENV_TYPE = os.getenv("ENV_TYPE")
    print("Clonando Repositorios")
    ODOO_VERSION = os.getenv("ODOO_VERSION")
    SOURCES = os.path.join(Path(__file__).resolve().parent, "src")

    for repository in required_sources[ENV_TYPE]:
        name = repository.split("/")[1]
        path = os.path.join(SOURCES, name)
        if not os.path.isdir(os.path.join(SOURCES, name)):
            os.system(
                f"git clone -b '{ODOO_VERSION}' git@github.com:{repository}.git {path}"
            )
        else:
            print(f"{repository} exists")


def run_odoo():
    print("Ejecutando Odoo...")
    os.system("docker compose up -d")


def stop_odoo():
    print("Deteniendo Odoo...")
    os.system("docker compose down")


def restart_odoo():
    print("Reiniciando Odoo...")
    os.system("docker compose down")
    os.system("docker compose up -d")

def show_logs():
    print("Mostrando logs de Odoo (últimos 10, en tiempo real)...")
    os.system("docker compose logs --tail 10 -f")


def psql(d):
    print(d)
    PROJECT_NAME = os.getenv("PROJECT_NAME")
    POSTGRES_USER = os.getenv("POSTGRES_USER")
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
    os.system(
        f"docker exec -it -e PGPASSWORD={POSTGRES_PASSWORD} {PROJECT_NAME} psql --host {PROJECT_NAME}_db -U {POSTGRES_USER} -d {d}"
    )


def main():
    # Cargar las variables de entorno
    load_dotenv()

    # Crear el parser
    parser = argparse.ArgumentParser(description="Script para controlar Odoo.")

    subparsers = parser.add_subparsers(dest="action", help="Acciones")
    subparsers.add_parser("run", help="Ejecuta Odoo")
    subparsers.add_parser("stop", help="Detiene Odoo")
    subparsers.add_parser("restart", help="Reiniciar Odoo")
    subparsers.add_parser("bash", help="Bash")
    subparsers.add_parser("init", help="Clone repositories")

    # Subparser para el comando "logs"
    subparsers.add_parser("logs", help="Muestra los últimos 10 logs en tiempo real")

    # Subparser para el comando "build"
    build_parser = subparsers.add_parser("build", help="Construye Odoo")
    build_parser.add_argument(
        "--no-cache", action="store_true", help="Construir sin usar caché"
    )

    psql_parser = subparsers.add_parser("psql", help="psql")
    psql_parser.add_argument("-d", required=True, help="Database name")

    sync_parser = subparsers.add_parser("sync", help="Sync Submodules")
    sync_parser.add_argument("r", help="Repository")
    sync_parser.add_argument("b", help="Branch")
    sync_parser.add_argument("--v", action="store_true", default=False, help="Git log")

    # Parsear los argumentos
    args = parser.parse_args()

    # Ejecutar la acción correspondiente
    if args.action == "run":
        run_odoo()
    elif args.action == "stop":
        stop_odoo()
    elif args.action == "restart":
        restart_odoo()
    elif args.action == "build":
        build_odoo(args.no_cache)
    elif args.action == "bash":
        run_bash()
    elif args.action == "init":
        init_addons()
    elif args.action == "psql":
        psql(args.d)
    elif args.action == "sync":
        sync(args.r, args.b, show=args.v)

    elif args.action == "logs":
        show_logs()


if __name__ == "__main__":
    main()
